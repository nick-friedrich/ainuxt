// AI Generation Reference: See ~/_ai/README.md for guidelines and patterns.
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client"
  output       = "../generated/prisma"
  moduleFormat = "esm" // or `"cjs"` for CommonJS
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Lucia package is deprecated, it has been transformed into a learning resource:
// @see: https://lucia-auth.com/sessions/basic-api/prisma

// Basic User Model (Customize for your needs)
model User {
  id             String  @id @default(cuid())
  email          String  @unique
  authProvider   String? @default("password")
  hashedPassword String?

  name              String?
  avatarUrl         String?
  username          String? @unique
  acceptedMarketing Boolean @default(false)

  // Email Verification
  emailVerifiedAt           DateTime? // Timestamp when email was verified
  emailVerifyToken          String?   @unique // Token sent for verification
  emailVerifyTokenExpiresAt DateTime? // Expiry for the verification token

  // OTP / 2FA / Password Reset
  otpToken          String? // OTP token (could be hashed)
  otpTokenExpiresAt DateTime? // Expiry for the OTP token

  // Password Reset
  passwordResetToken          String?   @unique // Token sent for password reset
  passwordResetTokenExpiresAt DateTime? // Expiry for the password reset token

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Keeping optional soft delete

  // Relations
  sessions Session[]
  roles    UserRole[]
}

model Session {
  id        String   @id // SHA-256 hash of token
  expiresAt DateTime
  userId    String // Changed to String to match User ID

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique // e.g., "ADMIN", "USER"

  users UserRole[]
}

model UserRole {
  userId     String // Changed to String to match User ID
  roleId     Int // Role ID remains Int
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId]) // Composite primary key
  @@index([roleId]) // Optional: Index for querying by role
}

// model BlogPost {
//   id        Int      @id @default(autoincrement())
//   title     String
//   category  String   @default("general")
//   slug      String   @unique
//   published Boolean  @default(false)
//   content   String
//   keywords  String[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// Remove old example Post model if present
// model Post { ... }
